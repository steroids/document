<?php

namespace steroids\document\models;

use steroids\document\DocumentModule;
use steroids\document\enums\DocumentType;
use steroids\document\models\meta\DocumentMeta;
use steroids\billing\models\BillingCurrency;
use yii\base\Exception;
use yii\helpers\FileHelper;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;

/**
 * Class Document
 * @package steroids\document\models
 * @property-read string $downloadName
 */
class Document extends DocumentMeta
{
    private static ?array $_instances = null;

    /**
     * @param $name
     * @return static
     * @throws Exception
     */
    public static function getByName($name)
    {
        return static::findOrPanic(['name' => $name]);
    }

    /**
     * @return static[]
     */
    public static function getAll()
    {
        if (!static::$_instances) {
            static::$_instances = static::find()
                ->where(['isVisible' => true])
                ->indexBy('name')
                ->all();
        }
        return array_values(static::$_instances);
    }

    public static function findNames($categories = null, $tags = null, $condition = null)
    {
        $query = Document::find()->alias('document');

        // Categories
        $categoryIds = DocumentCategory::find()
            ->select('id')
            ->where(['name' => $categories])
            ->column();
        if (!empty($categoryIds)) {
            $query->andWhere(['categoryId' => $categoryIds]);
        }

        // Tags
        $tagIds = DocumentTag::find()
            ->select('id')
            ->where(['name' => $tags])
            ->column();
        if (!empty($tagIds)) {
            $query
                ->innerJoin('document_tags_junction j', 'j."documentId" = document.id')
                ->andWhere(['tagId' => $tagIds]);
        }

        // Custom condition
        if (is_array($condition)) {
            $query->andWhere($condition);
        } elseif (is_callable($condition)) {
            call_user_func($condition, $query);
        }

        return $query
            ->select('name')
            ->orderBy([
                'position' => SORT_ASC,
                'id' => SORT_ASC,
            ])
            ->column();
    }


    /**
     * @inheritDoc
     */
    public function rules()
    {
        return [
            ...parent::rules(),
            ['versionTime', 'default', 'value' => date('Y-m-d H:i:s')],
            ['codeLastNumber', 'default', 'value' => 0],
            [['!versionTime', '!codeLastNumber'], 'safe'],
            ['signMode', 'required', 'when' => fn() => $this->isSignRequired],
            ['codeNumberMinLength', 'default', 'value' => DocumentModule::getInstance()->defaultCodeNumberMinLength],
        ];
    }

    public function getLink()
    {
        return \Yii::$app->params['backendOrigin'] . Url::to(['/document/document/download', 'name' => $this->downloadName]);
    }

    public function getDownloadName($suffix = '')
    {
        $ext = null;
        if (!$ext && $this->file) {
            $ext = pathinfo($this->file->fileName, PATHINFO_EXTENSION);
        }
        if (!$ext && $this->type === DocumentType::TEMPLATE_HTML) {
            $ext = 'pdf';
        }

        return $this->name . $suffix . ($ext ? '.' . $ext : '');
    }

    /**
     * @return string
     * @throws NotFoundHttpException
     */
    public function download()
    {
        if (!$this->file) {
            throw new NotFoundHttpException('No file for document "' . $this->name . '"');
        }
        return $this->file->path;
    }

    public function beforeSave($insert)
    {
        if ($insert || $this->isAttributeChanged('templateHtml')) {
            if (strpos($this->templateHtml, '<html>') !== 0) {
                $this->templateHtml = '<html><body>' . $this->templateHtml . '</body></html>';
            }
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
